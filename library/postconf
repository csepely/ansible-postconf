#!/usr/bin/python

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = '''
---
module: postconf

short_description: Module for Postfix postconf

version_added: "2.4"

description:
    - "This is module for setup Postfix variables in main.cf with postconf command"

options:
    name:
        description:
            - Variable name.
        required: true
    value:
        description:
            - Value of the variable. Required if C(state=present).
        required: false
        default: null
    state:
        description:
            - Whether to ensure that the variable is present or absent.
        required: false
        default: present
        choices: [ "present", "absent" ]
    configuration:
        description:
            - configuration file to be edited
        required: false
        default: main
        choices: [ "main", "master/service/entries", "master/service/parameters" ]


extends_documentation_fragment:
    - system

author:
    - Alexander Galato (@alet)
    - Peter Csepely (@csepely)
'''

EXAMPLES = '''
# Assign value
- name: Make myhostname be equial "gateway.home"
  postconf:
    name: myhostname
    value: gateway.home
    configuration: main

# Remove variable from config file
- name: Remove milter_protocol
  postconf:
    name: milter_protocol
    state: absent
'''

from ansible.module_utils.basic import AnsibleModule

def test_var(module, postconf_path, postconf_arg):
    default_out = ""
    if module.params["configuration"] == "master/service/entries":
        postconf_arg += " -Mfx"
    elif module.params["configuration"] == "master/service/parameters":
        postconf_arg += " -P -H"
    else:
        postconf_arg += " -dh"
        rc, default_out, err = module.run_command("%s %s %s" % (postconf_path, postconf_arg, module.params["name"]))
        postconf_arg = " -h"
    rc, out, err  = module.run_command("%s %s %s" % (postconf_path, postconf_arg, module.params["name"]))
    if rc != 0 or len(out) == 0:
        return False

    if len(default_out) > 0 and len(out) > 0:
        if default_out != out:
            return True
        elif default_out == out:
            return False

    return True

def query_var(module, postconf_path, postconf_arg):
    service_entry = False
    if module.params["configuration"] == "master/service/entries":
        postconf_arg += " -Mf"
        service_entry = True
    elif module.params["configuration"] == "master/service/parameters":
        postconf_arg += " -P -h"
    else:
        postconf_arg += " -h"

    module.log(msg="query_var => postconf_path = %s, postconf_arg = %s, module.params = %s" % (postconf_path, postconf_arg, module.params))
    rc, out, err  = module.run_command("%s %s %s" % (postconf_path, postconf_arg, module.params["name"]))

    if rc != 0:
        module.log(msg="query_var => rc != 0")
        return False

    m = ' '.join(out.split("\n")[0].rstrip().split()) if service_entry else out.rstrip()
    if m != module.params["value"]:
        module.log(msg="query_var => m != value (m=%s, value=%s)" % (m, module.params["value"]))
        module.log(msg="query_var => return False")
        return False

    module.log(msg="query_var => return True")
    return True


def set_value(module, postconf_path, postconf_arg):
    if query_var(module, postconf_path, postconf_arg):
        module.log(msg="set_vaule = > already set...")
        return (False, "The variable %s already set in value %s" % (module.params["name"], module.params["value"]))

    if module.params["configuration"] == "master/service/entries":
        postconf_arg += " -M -e"
    elif module.params["configuration"] == "master/service/parameters":
        postconf_arg += " -P -e"
    else:
        postconf_arg += " -e"

    module.log(msg="set_value => postconf_path = %s, postconf_arg = %s, module.params = %s" % (postconf_path, postconf_arg, module.params))
    rc, out, err = module.run_command("%s %s \"%s=%s\"" % (postconf_path, postconf_arg, module.params["name"], module.params["value"]))
    if rc != 0:
        module.log(msg="set_value => rc != 0, out=(%s), err=(%s)" % (out, err))
        module.fail_json(msg="Could not set variable")

    module.log(msg="set_value => return True, out=(%s), err=(%s)" % (out, err))
    return (True, "Variable was set (%s = %s)" % (module.params["name"], module.params["value"]))

def remove_value(module, postconf_path, postconf_arg):
    if test_var(module, postconf_path, postconf_arg):
        if module.params["configuration"] == "master/service/entries":
            postconf_arg += " -MX"
        elif module.params["configuration"] == "master/service/parameters":
            postconf_arg += " -PX"
        else:
            postconf_arg += " -X"
        rc, out, err = module.run_command("%s %s %s" % (postconf_path, postconf_arg, module.params["name"]))
        if rc == 0:
            return (True, "Variable was removed")

    return (False, "Variable was not removed")

def main():
    module_args = dict(
        name=dict(type='str', required=True),
        value=dict(type='str', required=False, default=''),
        state=dict(type='str', required=False, default='present', choices=["present", "absent"]),
        configuration=dict(type='str', required=False, default='main', choices=["main", "master/service/entries", "master/service/parameters"]),
    )

    module = AnsibleModule(
        argument_spec = module_args,
        supports_check_mode = True,
    )

    postconf_path = module.get_bin_path('postconf', True)
    p = module.params

    changed = False
    message = ''
    postconf_arg = ""

    if p["value"] is None and p["state"] == "present":
        module.fail_json(msg="You must specify 'value' to setup variable")

    if p["state"] == "present":
        changed, msg = set_value(module, postconf_path, postconf_arg)
    elif p["state"] == "absent":
        changed, msg = remove_value(module, postconf_path, postconf_arg)

    module.exit_json(changed=changed, msg=msg)

if __name__ == '__main__':
    main()
